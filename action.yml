name: "venkatamutyala-test-action1"
author: "@VenkataMutyala"
description: "Abstracts defining actions to push Docker images to desired registry, defaults to ghcr.io"
branding:
  icon: 'box'
  color: 'red'

inputs:
  # common inputs
  dockerfile:
    description: 'The Dockerfile filename'
    required: false
    default: 'Dockerfile'

  # ghcr
  github_token:
     description: "Personal Access Token (PAT) used to authenticate with the GitHub Container Registry."
     required: false
     default: ${{ github.token }}

runs:
  using: "composite"
  steps:
    - name: Extract Command and Directory
      id: extract
      shell: bash
      run: |
        COMMENT="${{ github.event.comment.body }}"
        DIRECTORY=""
        
        if [[ "$COMMENT" =~ terraform\ plan\ (.+) ]]; then
          echo "COMMAND=plan" >> $GITHUB_ENV
          DIRECTORY="${BASH_REMATCH[1]}"
        elif [[ "$COMMENT" =~ terraform\ apply\ (.+) ]]; then
          echo "COMMAND=apply" >> $GITHUB_ENV
          DIRECTORY="${BASH_REMATCH[1]}"
        elif [[ "$COMMENT" =~ terraform\ yolo\ (.+) ]]; then
          echo "COMMAND=yolo" >> $GITHUB_ENV
          DIRECTORY="${BASH_REMATCH[1]}"
        fi
        
        # Trim leading and trailing whitespace (including newlines)
        DIRECTORY=$(echo "$DIRECTORY" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
        
        # Check if DIRECTORY is empty and exit with code 1 if it is
        if [ -z "$DIRECTORY" ]; then
          echo "Error: No directory found."
          exit 1
        fi
        
        echo "DIRECTORY=$DIRECTORY" >> $GITHUB_ENV
        

    - name: Checkout
      uses: actions/checkout@v4
  
    - name: terraform plan
      if: env.COMMAND == 'plan'
      uses: dflook/terraform-plan@v1
      with:
        path: ${{ env.DIRECTORY }}

    - name: terraform apply
      if: env.COMMAND == 'apply'
      uses: dflook/terraform-apply@v1
      with:
        path: ${{ env.DIRECTORY }}


    - name: Post Workflow Run Link to PR
      if: always() && github.event_name == 'pull_request'
      uses: actions/github-script@v5
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const runId = process.env.GITHUB_RUN_ID;
          const repo = process.env.GITHUB_REPOSITORY;
          const prNumber = context.payload.pull_request.number;
          const commentUrl = `https://api.github.com/repos/${repo}/issues/${prNumber}/comments`;
          const workflowRunUrl = `https://github.com/${repo}/actions/runs/${runId}`;

          const comment = `Workflow run completed. Link to the run: [Workflow Run](${workflowRunUrl})`;

          await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: prNumber,
            body: comment
          });

