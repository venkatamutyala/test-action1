name: "venkatamutyala-test-action1"
author: "@VenkataMutyala"
description: "Abstracts defining actions to push Docker images to desired registry, defaults to ghcr.io"
branding:
  icon: 'box'
  color: 'red'

inputs:
  path:
    description: Path to the Terraform configuration
    required: false
    default: .
  workspace:
    description: Name of the Terraform workspace
    required: false
    default: default
  backend_config:
    description: List of backend config values to set, one per line
    required: false
    default: ""
  backend_config_file:
    description: Path to a backend config file
    required: false
    default: ""
  variables:
    description: Variable definitions
    required: false
  var_file:
    description: List of var file paths, one per line
    required: false
    default: ""
  parallelism:
    description: Limit the number of concurrent operations
    required: false
    default: "0"
  label:
    description: A friendly name for this plan
    required: false
    default: ""
  auto_approve:
    description: Automatically approve and apply plan
    required: false
    default: "false"
  target:
    description: List of resources to target for the apply, one per line
    required: false
    default: ""
  replace:
    description: List of resources to replace if an update is required, one per line
    required: false
    default: ""
  destroy:
    description: Create and apply a plan to destroy all resources
    required: false
    default: "false"
  plan_path:
    description: Path to the plan file to apply.
    required: false
    default: ""
  backend_type:
    description: The backend plugin name
    required: true
  add_github_comment:
    description: Add the plan to a GitHub PR
    required: false
    default: "true"
  target_branch_to_apply:
    description: The name of the branch to trigger an apply on.
    required: true
    default: "main"
  
    
outputs:
  terraform:
    description: The Terraform version used by the configuration
  changes:
    description: If the generated plan would update any resources or outputs this is set to `true`, otherwise it's set to `false`.
  to_add:
    description: The number of resources that would be added by this plan
  to_change:
    description: The number of resources that would be changed by this plan
  to_destroy:
    description: The number of resources that would be destroyed by this plan
  plan_path:
    description: Path to a file in the workspace containing the generated plan in an opaque binary format.
  text_plan_path:
    description: Path to a file in the workspace containing the generated plan in human readable format. This won't be set if the backend type is `remote` and `auto_approve` is `true`
  json_plan_path:
    description: Path to a file in the workspace containing the generated plan in JSON format. This won't be set if the backend type is `remote`.
  run_id:
    description: If the root module uses the `remote` or `cloud` backend in remote execution mode, this output will be set to the remote run id.
  failure-reason:
    description: The reason for the build failure. May be `apply-failed` or `plan-changed`.
  

runs:
  using: "composite"
  steps:
    # - name: Post Workflow Run Link
    #   if: github.event.issue.pull_request != null
    #   shell: bash
    #   run: |
    #     COMMENT_URL="${{ github.event.issue.comments_url }}"
    #     WORKFLOW_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
    #     COMMENT_TEXT="[View workflow Details Run ID: ${{ github.run_id }}]($WORKFLOW_URL)."
        
    #     curl -s -H "Authorization: token ${{ inputs.github_token }}" \
    #          -H "Accept: application/vnd.github.v3+json" \
    #          -X POST "$COMMENT_URL" \
    #          -d "{\"body\":\"$COMMENT_TEXT\"}"
        

    - name: Checkout
      uses: actions/checkout@v4

    - name: terraform fmt
      uses: dflook/terraform-fmt-check@v1
      id: fmt-check
      with:
        path: ${{ inputs.path }}
        workspace: ${{ inputs.workspace }}
        backend_config: ${{ inputs.backend_config }}
        backend_config_file: ${{ inputs.backend_config_file }}

    - name: Wrong formatting found
      if: ${{ failure() && steps.fmt-check.outputs.failure-reason == 'check-failed' }}
      shell: bash
      run: echo "Please format your terraform correctly. Use 'terraform fmt' or 'tofu fmt'"

    - name: terraform validate
      uses: dflook/terraform-validate@v1
      id: Validation
      with:
        path: ${{ inputs.path }}
        workspace: ${{ inputs.workspace }}
        backend_config: ${{ inputs.backend_config }}
        backend_config_file: ${{ inputs.backend_config_file }}

    - name: Test terraform-version
      uses: dflook/terraform-version@v1
      id: Versions
      with:
        path: ${{ inputs.path }}
        workspace: ${{ inputs.workspace }}
        backend_config: ${{ inputs.backend_config }}
        backend_config_file: ${{ inputs.backend_config_file }}
  
    - name: terraform plan
      if: github.event.pull_request != null
      uses: dflook/terraform-plan@v1
      with:
        path: ${{ inputs.path }}
        workspace: ${{ inputs.workspace }}
        backend_config: ${{ inputs.backend_config }}
        backend_config_file: ${{ inputs.backend_config_file }}
        variables: ${{ inputs.variables }}
        var_file: ${{ inputs.var_file }}
        parallelism: ${{ inputs.parallelism }}
        label: ${{ inputs.label }}
        target: ${{ inputs.target }}
        replace: ${{ inputs.replace }}
        destroy: ${{ inputs.destroy }}
        add_github_comment:  ${{ inputs.add_github_comment }}

    - name: terraform apply
      if: github.ref_name == ${{ inputs.target_branch_to_apply }}
      uses: dflook/terraform-apply@v1
      with:
        path: ${{ inputs.path }}
        workspace: ${{ inputs.workspace }}
        backend_config: ${{ inputs.backend_config }}
        backend_config_file: ${{ inputs.backend_config_file }}
        variables: ${{ inputs.variables }}
        var_file: ${{ inputs.var_file }}
        parallelism: ${{ inputs.parallelism }}
        label: ${{ inputs.label }}
        auto_approve: ${{ inputs.auto_approve }}
        target: ${{ inputs.target }}
        replace: ${{ inputs.replace }}
        destroy: ${{ inputs.destroy }}
        plan_path: ${{ inputs.plan_path }}



# #unlock state:
#         path: ${{ inputs.path }}
#         workspace: ${{ inputs.workspace }}
#         backend_config: ${{ inputs.backend_config }}
#         backend_config_file: ${{ inputs.backend_config_file }}
#         lock_id: ${{ inputs.lock_id }}




